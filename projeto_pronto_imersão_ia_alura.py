# -*- coding: utf-8 -*-
"""Projeto_Pronto_Imersão IA Alura.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sqAIPGEWgCKhoB0s8ZJ8KzTW5J9X51ny
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Notícias --- #
##########################################
def agente_buscador(topico, data_de_hoje):

    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assistente de pesquisa. A sua tarefa é usar a ferramenta de busca do google (google_search)
        para recuperar as últimas notícias de lançamentos muito relevantes sobre o tópico abaixo.
        Foque em no máximo 5 lançamentos relevantes, com base na quantidade e entusiasmo das notícias sobre ele.
        Se um tema tiver poucas notícias ou reações entusiasmadas, é possível que ele não seja tão relevante assim
        e pode ser substituído por outro que tenha mais.
        Esses lançamentos relevantes devem ser atuais, de no máximo um mês antes da data de hoje.
        """,
        description="Agente que busca informações no Google",
        tools=[google_search]
    )

    entrada_do_agente_buscador = f"Tópico: {topico}\nData de hoje: {data_de_hoje}"

    lancamentos = call_agent(buscador, entrada_do_agente_buscador)
    return lancamentos

################################################
# --- Agente 2: Planejador de posts --- #
################################################
def agente_planejador(topico, lancamentos_buscados):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        instruction="""
        Você é um planejador de conteúdo, especialista em notícias de concursos públicos. Com base na lista de
        lançamentos mais recentes e relevantes fornecida pelo buscador, você deve:

        1.  Selecionar os concursos mais relevantes da lista.
        2.  Para cada concurso selecionado, usar a ferramenta de busca do Google (google_search) para:
            *   Listar os cargos disponíveis no edital e seus respectivos salários.
            *   Encontrar informações sobre o último concurso realizado (ano, número de vagas e, **principalmente, o número de nomeações feitas**).
        3.  Analisar as informações coletadas (cargos, salários, nomeações) para escolher o concurso mais promissor para um post. O concurso mais promissor geralmente tem um bom número de nomeações no último concurso e cargos com salários atrativos.
        4.  Ao final, retornar as seguintes informações para o concurso escolhido, **formatadas de forma clara e organizada, utilizando títulos, subtítulos e listas**:
            *   **Nome do Concurso:** [Nome do Concurso Escolhido]
            *   **Cargos e Salários:**
                *   Cargo 1: Salário
                *   Cargo 2: Salário
                *   ...
            *   **Informações do Último Concurso:**
                *   Ano: [Ano do Último Concurso]
                *   Número de Vagas: [Número de Vagas]
                *   Número de Nomeações: [Número de Nomeações]
            *   **Pontos Relevantes para o Post:**
                *   Ponto 1
                *   Ponto 2
                *   ...
            *   **Plano Detalhado do Post:**
                *   Assunto 1 a ser abordado
                *   Assunto 2 a ser abordado
                *   ...

        Apresente as informações de forma estruturada e fácil de ler. Comece com um breve resumo do concurso escolhido antes de detalhar os pontos acima.
        """,
        description="Agente que planeja posts",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"Tópico:{topico}\nLançamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

########################################
# --- Agente 3: Redator de Posts --- #
########################################
def agente_redator(plano_do_post):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.0-flash",
        instruction="""
        Você é um redator de posts para redes sociais, especialista em conteúdo para o Instagram sobre concursos públicos.
        Com base no plano de postagem detalhado fornecido pelo agente planejador, sua tarefa é criar um post conciso e direto
        para o Instagram, focado em um concurso público específico, apresentando apenas as seguintes informações:

        1.  O nome do concurso.
        2.  Os cargos disponíveis e seus respectivos salários.
        3.  O número de nomeações feitas no último concurso.
        O post deve ser:
        1.  **Claro e direto:** Apresente as informações essenciais de forma objetiva.
        2.  **Formatado para Instagram:** Utilize emojis, hashtags relevantes e uma linguagem descontraída que engaje o público. Use parágrafos curtos e bullet points, se necessário.
        3.  **Com um bom call to action:** Incentive o público a interagir (curtir, comentar, compartilhar, salvar, marcar amigos, visitar um link, etc.).

        Use as informações do plano do post para criar o texto, focando apenas nos pontos solicitados.
        """,
        description="Agente que redige posts para Instagram sobre concursos públicos",
        tools=[] # O redator não precisa de ferramentas externas, ele usa as informações do plano
    )

    entrada_do_agente_redator = f"Plano do Post:\n{plano_do_post}"

    post_instagram = call_agent(redator, entrada_do_agente_redator)
    return post_instagram

#######################################
# --- Agente 4: Revisor Final --- #
#######################################
def agente_revisor(post_para_revisar):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.0-flash",
        instruction="""
        Você é um revisor especializado em conteúdo para redes sociais, focado em concursos públicos.
        Sua tarefa é revisar o post do Instagram fornecido, garantindo que ele esteja:

        1.  **Gramaticalmente correto:** Verifique erros de ortografia, concordância e pontuação.
        2.  **Claro e conciso:** Certifique-se de que a mensagem seja fácil de entender e que não haja informações redundantes.
        3.  **Adequado ao público:** Avalie se a linguagem e o tom são apropriados para um público interessado em concursos públicos no Instagram.
        4.  **Engajador:** Sugira pequenas melhorias para aumentar o potencial de engajamento (ex: sugestões de emojis, ajuste na chamada para ação).
        5.  **Formatado corretamente:** Verifique a divisão em parágrafos, uso de bullet points e hashtags.
        6.  **Completo:** Garanta que todas as informações essenciais do concurso (nome, cargos, salários, nomeações) estejam presentes e corretas, conforme o plano original (embora você não tenha acesso direto ao plano, use o contexto do post para inferir).

        Se encontrar erros ou pontos de melhoria, reescreva o post ou sugira as alterações de forma clara. Se o post estiver ótimo, apenas confirme que ele está pronto para publicação.
        """,
        description="Agente que revisa posts para Instagram sobre concursos públicos",
        tools=[] # O revisor não precisa de ferramentas externas
    )

    entrada_do_agente_revisor = f"Post para revisar:\n{post_para_revisar}"

    post_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return post_revisado

# --- Obter o Tópico do Usuário ---
topico = input("❓ Por favor, digite o concurso que gostaria de informações: ")

# Inserir lógica do sistema de agentes ################################################
if not topico:
    print("Você esqueceu de digitar o tópico!")
else:
    print(f"Maravilha! Vamos então criar o post sobre novidades em {topico}")

    # Exemplo de como usar os quatro agentes em sequência:
    # Define o tópico e a data de hoje
    topico_concurso = "concursos públicos abertos" # Você pode querer usar a variável 'topico' aqui, dependendo da sua necessidade
    data_atual = date.today().strftime("%d/%m/%Y")

    # Executa o agente buscador
    print("Executando Agente Buscador...")
    lancamentos_encontrados = agente_buscador(topico_concurso, data_atual)
    print("\nLançamentos encontrados:")
    display(to_markdown(lancamentos_encontrados))

    # Executa o agente planejador
    print("\nExecutando Agente Planejador...")
    plano_final_do_post = agente_planejador(topico_concurso, lancamentos_encontrados)
    print("\nPlano do Post gerado:")
    display(to_markdown(plano_final_do_post))

    # Executa o agente redator
    print("\nExecutando Agente Redator...")
    post_para_instagram = agente_redator(plano_final_do_post)
    print("\nPost para Instagram gerado:")
    display(to_markdown(post_para_instagram))

    # Executa o agente revisor
    print("\nExecutando Agente Revisor...")
    post_final_revisado = agente_revisor(post_para_instagram)
    print("\nPost revisado e finalizado:")
    display(to_markdown(post_final_revisado))